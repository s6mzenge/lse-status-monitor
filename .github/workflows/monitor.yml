name: LSE Status Monitor

on:
  workflow_dispatch: # Ermöglicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # Für API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual # Spezielle manuelle Trigger vom Telegram Bot

jobs:
  check-status:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN || github.token }}
        fetch-depth: 0  # Vollständige Historie für besseres Merging
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 numpy
    
    - name: Check LSE Status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Setze MANUAL_RUN flag für manuelle Ausführungen
        MANUAL_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'check-lse-status-manual' }}
      run: |
        python check_lse.py
    
    - name: Update status and history files
      run: |
        # Git Konfiguration
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Stelle sicher, dass wir auf dem neuesten Stand sind
        git fetch origin main
        git pull origin main --no-rebase || true
        
        # Bei Konflikten: Nehme die lokale Version (unsere Änderungen)
        if [ -f status.json ]; then
          git checkout --ours status.json 2>/dev/null || true
        fi
        if [ -f history.json ]; then
          git checkout --ours history.json 2>/dev/null || true
        fi
        
        # Füge Änderungen hinzu
        git add status.json history.json 2>/dev/null || true
        
        # Committe nur wenn es Änderungen gibt
        if ! git diff --cached --quiet; then
          git commit -m "Update status and history [skip ci]"
          
          # Versuche zu pushen mit Retry-Logik
          for i in {1..3}; do
            if git push origin main; then
              echo "✅ Push erfolgreich"
              break
            else
              echo "⚠️ Push fehlgeschlagen, versuche erneut ($i/3)..."
              git pull origin main --no-rebase || true
              # Bei Konflikten nehme unsere Version
              git checkout --ours status.json history.json 2>/dev/null || true
              git add status.json history.json 2>/dev/null || true
              git commit --amend --no-edit || true
            fi
          done
        else
          echo "ℹ️ Keine Änderungen zu committen"
        fi
