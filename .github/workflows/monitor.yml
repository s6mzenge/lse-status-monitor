name: LSE Status Monitor

on:
  workflow_dispatch: # Erm√∂glicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # F√ºr API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual # Spezielle manuelle Trigger vom Telegram Bot

# Optimized concurrency - allow parallel manual runs, serialize scheduled runs
concurrency:
  group: ${{ github.event_name == 'repository_dispatch' && github.run_id || 'lse-monitor' }}
  cancel-in-progress: ${{ github.event_name == 'repository_dispatch' }}

jobs:
  check-status:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN || github.token }}
        # Optimize fetch for manual runs - only need current commit
        fetch-depth: ${{ github.event_name == 'repository_dispatch' && '1' || '0' }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Faster than 3.10
        cache: 'pip'  # Enable pip caching
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lse-deps-v1
    
    - name: Install dependencies
      run: |
        # Install in optimized order - lightweight first, heavy last
        pip install --upgrade pip wheel
        pip install -r requirements.txt --prefer-binary
    
    - name: Check LSE Status
      id: check_status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN_MAMA: ${{ secrets.TELEGRAM_BOT_TOKEN_MAMA }}
        TELEGRAM_CHAT_ID_MAMA: ${{ secrets.TELEGRAM_CHAT_ID_MAMA }}
        TELEGRAM_BOT_TOKEN_PAPA: ${{ secrets.TELEGRAM_BOT_TOKEN_PAPA }}
        TELEGRAM_CHAT_ID_PAPA: ${{ secrets.TELEGRAM_CHAT_ID_PAPA }}
        # Setze MANUAL_RUN flag f√ºr manuelle Ausf√ºhrungen
        MANUAL_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'check-lse-status-manual' }}
      run: |
        echo "üöÄ Starting LSE check at $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        START_TIME=$(date +%s)
        
        python check_lse.py
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "‚è±Ô∏è LSE check completed in ${DURATION} seconds"
        
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "üìä Manual run performance: ${DURATION}s script execution"
        fi
    
    - name: Validate and commit changes
      run: |
        # Git Konfiguration
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Optimized validation - parallel processing for manual runs
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "üöÄ Manual run - using fast validation"
          python -c "
import json
import sys
import asyncio
from concurrent.futures import ThreadPoolExecutor

def validate_json(filename):
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
            print(f'‚úÖ {filename} is valid')
            return True
    except Exception as e:
        print(f'‚ùå {filename} is invalid: {e}')
        return False

# Parallel validation for speed
with ThreadPoolExecutor(max_workers=2) as executor:
    futures = [
        executor.submit(validate_json, 'status.json'),
        executor.submit(validate_json, 'history.json')
    ]
    results = [f.result() for f in futures]
    
if not all(results):
    sys.exit(1)
"
        else
          # Standard validation for scheduled runs
          python -c "
import json
import sys

try:
    with open('status.json', 'r') as f:
        status = json.load(f)
        print('‚úÖ status.json ist g√ºltig')
except Exception as e:
    print(f'‚ùå status.json ist ung√ºltig: {e}')
    sys.exit(1)

try:
    with open('history.json', 'r') as f:
        history = json.load(f)
        print('‚úÖ history.json ist g√ºltig')
except Exception as e:
    print(f'‚ùå history.json ist ung√ºltig: {e}')
    sys.exit(1)
"
        fi
        
        # Optimized git operations
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "üöÄ Manual run - optimized git operations"
          # Skip full fetch for manual runs, just sync current state
          git add status.json history.json
        else
          # Full sync for scheduled runs
          git fetch origin main
          git add status.json history.json
        fi
        
        # Pr√ºfe ob es √Ñnderungen gibt
        if git diff --cached --quiet; then
          echo "=== Keine √Ñnderungen zu committen ==="
        else
          echo "=== Committe √Ñnderungen ==="
          git diff --cached --stat
          
          # Committe mit timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            git commit -m "Manual update via Telegram [skip ci] - $TIMESTAMP"
          else
            git commit -m "Update status and history [skip ci] - $TIMESTAMP"
          fi
          
          # Optimized push strategy
          echo "üì§ Pushing changes..."
          if git push origin main; then
            echo "‚úÖ Push erfolgreich!"
          else
            echo "‚ö†Ô∏è Push conflict, attempting rebase..."
            git pull --rebase origin main && git push origin main
          fi
        fi
