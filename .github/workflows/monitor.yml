name: LSE Status Monitor

on:
  workflow_dispatch: # Ermöglicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # Für API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual # Spezielle manuelle Trigger vom Telegram Bot

# Verhindert parallele Ausführungen
concurrency:
  group: lse-monitor
  cancel-in-progress: false

jobs:
  check-status:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN || github.token }}
        fetch-depth: 0  # Vollständige Historie für besseres Merging
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 numpy
    
    # Backup der aktuellen Dateien erstellen
    - name: Backup current files
      run: |
        cp status.json status.json.backup 2>/dev/null || echo '{"last_date": "10 July", "last_check": null}' > status.json.backup
        cp history.json history.json.backup 2>/dev/null || echo '{"changes": []}' > history.json.backup
        
        echo "=== Backup Status ==="
        cat status.json.backup
        echo ""
        cat history.json.backup
    
    - name: Check LSE Status
      id: check_status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Setze MANUAL_RUN flag für manuelle Ausführungen
        MANUAL_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'check-lse-status-manual' }}
      run: |
        # Führe Check aus und speichere Exit Code
        python check_lse.py
        echo "check_exit_code=$?" >> $GITHUB_OUTPUT
        
        # Zeige aktuelle Inhalte zur Diagnose
        echo "=== Nach Check: status.json ==="
        cat status.json || echo "Fehler: status.json nicht gefunden"
        echo ""
        echo "=== Nach Check: history.json ==="
        cat history.json || echo "Fehler: history.json nicht gefunden"
    
    - name: Validate JSON files
      run: |
        # Validiere dass die JSON Dateien gültig sind
        echo "=== Validiere JSON Dateien ==="
        python -c "
        import json
        import sys
        
        try:
            with open('status.json', 'r') as f:
                status = json.load(f)
                print('✅ status.json ist gültig')
                print(f'  last_date: {status.get(\"last_date\")}')
                print(f'  last_check: {status.get(\"last_check\")}')
        except Exception as e:
            print(f'❌ status.json ist ungültig: {e}')
            # Restore backup
            import shutil
            shutil.copy('status.json.backup', 'status.json')
            print('  Backup wiederhergestellt')
            sys.exit(1)
        
        try:
            with open('history.json', 'r') as f:
                history = json.load(f)
                print('✅ history.json ist gültig')
                print(f'  Anzahl Änderungen: {len(history.get(\"changes\", []))}')
        except Exception as e:
            print(f'❌ history.json ist ungültig: {e}')
            # Restore backup
            import shutil
            shutil.copy('history.json.backup', 'history.json')
            print('  Backup wiederhergestellt')
            sys.exit(1)
        "
    
    - name: Update status and history files
      run: |
        # Git Konfiguration
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # WICHTIG: Stelle sicher, dass wir auf dem neuesten Stand sind
        echo "=== Hole neueste Änderungen von GitHub ==="
        git fetch origin main
        
        # Speichere die aktualisierten Dateien (NICHT die Backups!)
        echo "=== Sichere aktualisierte Dateien ==="
        cp status.json status.json.new
        cp history.json history.json.new
        
        # Reset auf origin/main
        git reset --hard origin/main
        
        # Kopiere die NEUEN (aktualisierten) Dateien zurück
        echo "=== Stelle aktualisierte Dateien wieder her ==="
        cp status.json.new status.json
        cp history.json.new history.json
        
        # Zeige den Inhalt zur Verifikation
        echo "=== Aktualisierte status.json ==="
        cat status.json
        echo ""
        echo "=== Aktualisierte history.json ==="
        cat history.json
        
        # Stage die Dateien
        git add status.json history.json
        
        # Prüfe ob es wirklich Änderungen gibt
        if git diff --cached --quiet; then
          echo "=== Keine Änderungen zu committen ==="
        else
          echo "=== Committe Änderungen ==="
          # Zeige was committet wird
          git diff --cached --stat
          
          # Committe mit timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          git commit -m "Update status and history [skip ci] - $TIMESTAMP"
          
          # Push mit Retry-Logik
          echo "=== Push zu GitHub ==="
          for i in 1 2 3; do
            echo "Push Versuch $i..."
            if git push origin main; then
              echo "✅ Push erfolgreich!"
              break
            else
              echo "❌ Push fehlgeschlagen, warte 5 Sekunden..."
              sleep 5
              git pull --rebase origin main
            fi
          done
        fi
    
    # Zusätzlicher Sicherheitscheck
    - name: Verify push success
      run: |
        echo "=== Verifiziere dass Push erfolgreich war ==="
        git fetch origin main
        
        # Vergleiche lokale und remote Version
        LOCAL_HASH=$(git rev-parse HEAD)
        REMOTE_HASH=$(git rev-parse origin/main)
        
        if [ "$LOCAL_HASH" = "$REMOTE_HASH" ]; then
          echo "✅ Lokale und Remote Version sind identisch!"
        else
          echo "⚠️  Warnung: Lokale und Remote Version unterscheiden sich"
          echo "Local:  $LOCAL_HASH"
          echo "Remote: $REMOTE_HASH"
        fi
