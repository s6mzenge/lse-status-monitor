name: LSE Status Monitor

"on":
  workflow_dispatch: # Erm√∂glicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # F√ºr API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual # Spezielle manuelle Trigger vom Telegram Bot

# Optimized concurrency - allow parallel manual runs, serialize scheduled runs
concurrency:
  group: ${{ github.event_name != 'schedule' && github.run_id || 'lse-monitor' }}
  cancel-in-progress: ${{ github.event_name != 'schedule' }}

jobs:
  check-status:
    runs-on: ubuntu-latest
    
    steps:
    - name: Performance monitoring setup
      run: |
        echo "WORKFLOW_START_TIME=$(date +%s)" >> $GITHUB_ENV
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "üéØ MANUAL RUN - Optimizing for speed (target: <12s total)"
        else
          echo "üìä SCHEDULED RUN - Full functionality enabled"
        fi
    
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN || github.token }}
        # Optimize fetch for manual runs - only need current commit
        fetch-depth: ${{ github.event_name != 'schedule' && '1' || '0' }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Faster than 3.10
        cache: 'pip'  # Enable pip caching
        cache-dependency-path: |
          requirements-core.txt
          requirements-advanced.txt
    
    - name: Cache core dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.11/site-packages
        key: ${{ runner.os }}-python-3.11-core-${{ hashFiles('requirements-core.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-3.11-core-
          ${{ runner.os }}-python-3.11-
    
    - name: Cache advanced dependencies
      if: ${{ github.event_name == 'schedule' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python3.11/site-packages
        key: ${{ runner.os }}-python-3.11-advanced-${{ hashFiles('requirements-advanced.txt', 'requirements-core.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-3.11-advanced-
          ${{ runner.os }}-python-3.11-
    
    - name: Smart dependency installation
      run: |
        # Export environment variables for the installation script
        export MANUAL_RUN="${{ github.event_name != 'schedule' && 'true' || 'false' }}"
        export INSTALL_ADVANCED="${{ github.event_name == 'schedule' && 'true' || 'false' }}"
        
        echo "üöÄ Smart installation mode:"
        echo "  Event name: ${{ github.event_name }}"
        echo "  Manual run: $MANUAL_RUN"
        echo "  Install advanced: $INSTALL_ADVANCED"
        
        # Track dependency installation time
        DEPS_START_TIME=$(date +%s)
        
        # Use our optimized installation script
        bash install_deps.sh
        
        DEPS_END_TIME=$(date +%s)
        DEPS_DURATION=$((DEPS_END_TIME - DEPS_START_TIME))
        echo "DEPS_INSTALL_TIME=$DEPS_DURATION" >> $GITHUB_ENV
        
        if [ "$MANUAL_RUN" = "true" ]; then
          echo "‚ö° Manual run dependency install: ${DEPS_DURATION}s"
          if [ $DEPS_DURATION -lt 5 ]; then
            echo "üöÄ EXCELLENT: Dependency install under 5s"
          elif [ $DEPS_DURATION -lt 10 ]; then
            echo "‚úÖ GOOD: Dependency install under 10s (target achieved)"
          else
            echo "‚ö†Ô∏è SLOW: Dependency install over 10s (baseline was 15s)"
          fi
        fi
    
    - name: Check LSE Status
      id: check_status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN_MAMA: ${{ secrets.TELEGRAM_BOT_TOKEN_MAMA }}
        TELEGRAM_CHAT_ID_MAMA: ${{ secrets.TELEGRAM_CHAT_ID_MAMA }}
        TELEGRAM_BOT_TOKEN_PAPA: ${{ secrets.TELEGRAM_BOT_TOKEN_PAPA }}
        TELEGRAM_CHAT_ID_PAPA: ${{ secrets.TELEGRAM_CHAT_ID_PAPA }}
        # Set event name for Python code to use proper detection
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        # Set MANUAL_RUN flag for manual executions (repository_dispatch and workflow_dispatch)
        MANUAL_RUN: ${{ github.event_name != 'schedule' }}
      run: |
        echo "üöÄ Starting LSE check at $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        START_TIME=$(date +%s)
        
        # Performance monitoring for optimization analysis
        if [ "${{ github.event_name }}" = "repository_dispatch" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "‚ö° Manual run mode - optimized for speed"
        else
          echo "üìä Scheduled run mode - full functionality"
        fi
        
        python check_lse.py
        
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "‚è±Ô∏è LSE check completed in ${DURATION} seconds"
        
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "üìä Manual run performance: ${DURATION}s script execution"
          echo "üéØ Optimization target: <5s total script time"
          
          # Performance analysis
          if [ $DURATION -lt 8 ]; then
            echo "üöÄ EXCELLENT: Script execution under 8s (target achieved)"
          elif [ $DURATION -lt 15 ]; then
            echo "‚ö° GOOD: Script execution under 15s (improvement achieved)"
          else
            echo "‚ö†Ô∏è SLOW: Script execution over 15s (needs optimization)"
          fi
        fi
    
    - name: Validate and commit changes
      run: |
        # Git Konfiguration
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Optimized validation for manual vs scheduled runs
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "üöÄ Manual run - using fast validation"
          # Simple parallel validation
          python -c "import json; print('‚úÖ status.json:', json.load(open('status.json'))['last_date'])" &
          python -c "import json; print('‚úÖ history.json:', len(json.load(open('history.json')).get('changes', [])))" &
          wait
        else
          # Standard validation for scheduled runs
          python -c "import json; json.load(open('status.json')); json.load(open('history.json')); print('‚úÖ JSON files valid')"
        fi
        
        # Optimized git operations
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "üöÄ Manual run - optimized git operations"
          # Skip full fetch for manual runs, just sync current state
          git add status.json history.json
        else
          # Full sync for scheduled runs
          git fetch origin main
          git add status.json history.json
        fi
        
        # Pr√ºfe ob es √Ñnderungen gibt
        if git diff --cached --quiet; then
          echo "=== Keine √Ñnderungen zu committen ==="
        else
          echo "=== Committe √Ñnderungen ==="
          git diff --cached --stat
          
          # Committe mit timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          if [ "${{ github.event_name }}" != "schedule" ]; then
            git commit -m "Manual update via ${{ github.event_name }} [skip ci] - $TIMESTAMP"
          else
            git commit -m "Update status and history [skip ci] - $TIMESTAMP"
          fi
          
          # Optimized push strategy
          echo "üì§ Pushing changes..."
          if git push origin main; then
            echo "‚úÖ Push erfolgreich!"
          else
            echo "‚ö†Ô∏è Push conflict, attempting rebase..."
            git pull --rebase origin main && git push origin main
          fi
        fi
    
    - name: Performance summary
      if: always()
      run: |
        WORKFLOW_END_TIME=$(date +%s)
        TOTAL_WORKFLOW_TIME=$((WORKFLOW_END_TIME - WORKFLOW_START_TIME))
        
        echo "========================================"
        echo "üéØ WORKFLOW PERFORMANCE SUMMARY"
        echo "========================================"
        echo "Total workflow time: ${TOTAL_WORKFLOW_TIME}s"
        
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "Run type: MANUAL (optimized)"
          if [ $TOTAL_WORKFLOW_TIME -lt 12 ]; then
            echo "üöÄ SUCCESS: Under 12s target (${TOTAL_WORKFLOW_TIME}s)"
          elif [ $TOTAL_WORKFLOW_TIME -lt 20 ]; then
            echo "‚ö° GOOD: Under 20s (${TOTAL_WORKFLOW_TIME}s) - improvement from 32s baseline"
          else
            echo "‚ö†Ô∏è SLOW: Over 20s (${TOTAL_WORKFLOW_TIME}s) - needs more optimization"
          fi
        else
          echo "Run type: SCHEDULED (full functionality)"
        fi
        echo "========================================"
