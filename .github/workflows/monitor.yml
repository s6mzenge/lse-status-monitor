name: LSE Status Monitor

on:
  workflow_dispatch: # Ermöglicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # Für API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual # Spezielle manuelle Trigger vom Telegram Bot

jobs:
  check-status:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN || github.token }}
        fetch-depth: 0  # Vollständige Historie für besseres Merging
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 numpy
    
    - name: Check LSE Status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        # Setze MANUAL_RUN flag für manuelle Ausführungen
        MANUAL_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'check-lse-status-manual' }}
      run: |
        python check_lse.py
    
    - name: Update status and history files
      run: |
        # Git Konfiguration
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Debug: Zeige aktuelle Dateien
        echo "=== Status.json Inhalt ==="
        cat status.json || echo "status.json nicht gefunden"
        echo ""
        echo "=== History.json Inhalt ==="
        cat history.json || echo "history.json nicht gefunden"
        echo ""
        
        # Stelle sicher, dass wir auf dem neuesten Stand sind
        git fetch origin main
        
        # Reset auf origin/main um sicherzustellen, dass wir den aktuellen Stand haben
        git reset --hard origin/main
        
        # Führe das Python-Skript erneut aus, um die Dateien zu aktualisieren
        # (Falls sie durch den Reset verloren gingen)
        python check_lse.py || true
        
        # Füge die aktualisierten Dateien hinzu
        git add status.json history.json
        
        # Zeige was geändert wurde
        echo "=== Git Status ==="
        git status
        
        # Committe nur wenn es Änderungen gibt
        if ! git diff --cached --quiet; then
          echo "=== Änderungen gefunden, committe... ==="
          git commit -m "Update status and history [skip ci]"
          
          # Push mit Force-with-lease (sicherer als force)
          echo "=== Pushe Änderungen... ==="
          git push origin main --force-with-lease || {
            echo "=== Push fehlgeschlagen, versuche Pull und erneuten Push ==="
            git pull origin main --rebase
            git push origin main
          }
        else
          echo "=== Keine Änderungen zu committen ==="
        fi
