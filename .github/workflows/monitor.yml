name: LSE Status Monitor

on:
  workflow_dispatch: # Erm√∂glicht manuelles Testen und Cron-Job.org Trigger
  repository_dispatch: # F√ºr API-Trigger
    types: 
      - check-lse-status
      - check-lse-status-manual

# KRITISCH: Verhindert parallele Ausf√ºhrungen
concurrency:
  group: lse-monitor-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-status:
    runs-on: ubuntu-latest
    # WICHTIG: Explizite Permissions f√ºr Schreibzugriff
    permissions:
      contents: write
      actions: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # Verwende PERSONAL_ACCESS_TOKEN wenn verf√ºgbar, sonst GITHUB_TOKEN
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN || github.token }}
        fetch-depth: 0
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 numpy
    
    # Backup der aktuellen Dateien
    - name: Backup current files
      run: |
        cp status.json status.json.backup 2>/dev/null || echo '{"last_date": "10 July", "last_check": null}' > status.json.backup
        cp history.json history.json.backup 2>/dev/null || echo '{"changes": []}' > history.json.backup
        
        echo "=== Backup erstellt ==="
        echo "status.json.backup:"
        cat status.json.backup
        echo ""
        echo "history.json.backup:"
        cat history.json.backup
    
    - name: Debug - Show initial state
      run: |
        echo "=== Initial Git Status ==="
        git status
        echo ""
        echo "=== Initial status.json ==="
        cat status.json || echo "status.json not found"
        echo ""
        echo "=== Initial history.json ==="
        cat history.json || echo "history.json not found"
        echo ""
        echo "=== Git Remote Info ==="
        git remote -v
        echo ""
        echo "=== Current Branch ==="
        git branch --show-current
    
    - name: Check LSE Status
      id: check_status
      env:
        GMAIL_USER: ${{ secrets.GMAIL_USER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_TO_2: ${{ secrets.EMAIL_TO_2 }}
        EMAIL_TO_3: ${{ secrets.EMAIL_TO_3 }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        MANUAL_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'check-lse-status-manual' }}
      run: |
        # F√ºhre Check aus
        python check_lse.py
        PYTHON_EXIT_CODE=$?
        
        echo "=== Python Script Exit Code: $PYTHON_EXIT_CODE ==="
        
        echo "=== Nach Python Script ==="
        echo "status.json:"
        cat status.json || echo "ERROR: status.json nicht vorhanden"
        echo ""
        echo "history.json:"
        cat history.json || echo "ERROR: history.json nicht vorhanden"
        
        # Speichere Exit Code f√ºr sp√§ter
        echo "python_exit_code=$PYTHON_EXIT_CODE" >> $GITHUB_OUTPUT
    
    - name: Validate JSON files
      run: |
        echo "=== Validiere JSON Dateien ==="
        python -c "
import json
import sys

errors = []

try:
    with open('status.json', 'r') as f:
        status = json.load(f)
        print('‚úÖ status.json ist g√ºltig')
        print(f'  last_date: {status.get(\"last_date\")}')
        print(f'  last_check: {status.get(\"last_check\")}')
        
        if not status.get('last_date'):
            errors.append('last_date fehlt in status.json')
except Exception as e:
    print(f'‚ùå status.json ist ung√ºltig: {e}')
    errors.append(f'status.json invalid: {e}')

try:
    with open('history.json', 'r') as f:
        history = json.load(f)
        print('‚úÖ history.json ist g√ºltig')
        print(f'  Anzahl √Ñnderungen: {len(history.get(\"changes\", []))}')
except Exception as e:
    print(f'‚ùå history.json ist ung√ºltig: {e}')
    errors.append(f'history.json invalid: {e}')

if errors:
    print('\\n‚ùå FEHLER GEFUNDEN:')
    for error in errors:
        print(f'  - {error}')
    sys.exit(1)
else:
    print('\\n‚úÖ Alle JSON Dateien sind g√ºltig!')
"
    
    - name: Configure Git with proper credentials
      run: |
        # Verwende GitHub App Token f√ºr bessere Permissions
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git config --global push.autoSetupRemote true
        git config --global init.defaultBranch main
        
        # Zeige Konfiguration
        echo "=== Git Config ==="
        git config --list | grep -E "(user|push)" || true
    
    - name: Commit and Push Changes - Advanced Strategy
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN || github.token }}
      run: |
        echo "=== Aktueller Branch ==="
        CURRENT_BRANCH=$(git branch --show-current)
        echo "Branch: $CURRENT_BRANCH"
        
        echo "=== Git Status vor Commit ==="
        git status --porcelain
        
        # F√ºge Dateien hinzu
        git add status.json history.json
        
        # Pr√ºfe ob es √Ñnderungen gibt
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è Keine √Ñnderungen zu committen"
          exit 0
        fi
        
        echo "=== √Ñnderungen gefunden ==="
        git diff --staged --stat
        
        # Committe √Ñnderungen
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        git commit -m "Update status and history [skip ci] - $TIMESTAMP" \
                   -m "Automated update from LSE Status Monitor" \
                   -m "Python exit code: ${{ steps.check_status.outputs.python_exit_code }}"
        
        echo "=== Git Log nach Commit ==="
        git log --oneline -3
        
        # Konfiguriere Remote mit Token
        echo "=== Konfiguriere Git Remote mit Token ==="
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        
        # Hole neueste √Ñnderungen
        echo "=== Hole neueste √Ñnderungen ==="
        git fetch origin $CURRENT_BRANCH
        
        # Push-Strategie mit mehreren Versuchen
        PUSH_SUCCESS=false
        
        for attempt in {1..5}; do
          echo ""
          echo "=== Push Versuch $attempt/5 ==="
          
          if [ $attempt -eq 1 ]; then
            # Versuch 1: Normaler Push
            echo "Strategie: Normaler Push"
            if git push origin $CURRENT_BRANCH; then
              PUSH_SUCCESS=true
              break
            fi
          elif [ $attempt -eq 2 ]; then
            # Versuch 2: Pull und Push
            echo "Strategie: Pull + Push"
            git pull origin $CURRENT_BRANCH --no-rebase --strategy=ours || true
            if git push origin $CURRENT_BRANCH; then
              PUSH_SUCCESS=true
              break
            fi
          elif [ $attempt -eq 3 ]; then
            # Versuch 3: Rebase
            echo "Strategie: Rebase + Push"
            git pull origin $CURRENT_BRANCH --rebase || true
            if git push origin $CURRENT_BRANCH; then
              PUSH_SUCCESS=true
              break
            fi
          elif [ $attempt -eq 4 ]; then
            # Versuch 4: Force-with-lease
            echo "Strategie: Force-with-lease"
            if git push origin $CURRENT_BRANCH --force-with-lease; then
              PUSH_SUCCESS=true
              break
            fi
          else
            # Versuch 5: Force (letztes Mittel)
            echo "‚ö†Ô∏è Strategie: Force Push (letztes Mittel)"
            if git push origin $CURRENT_BRANCH --force; then
              PUSH_SUCCESS=true
              break
            fi
          fi
          
          echo "Push fehlgeschlagen, warte 3 Sekunden..."
          sleep 3
        done
        
        if [ "$PUSH_SUCCESS" = true ]; then
          echo ""
          echo "‚úÖ ============================================"
          echo "‚úÖ PUSH ERFOLGREICH!"
          echo "‚úÖ ============================================"
        else
          echo ""
          echo "‚ùå ============================================"
          echo "‚ùå FEHLER: Push nach 5 Versuchen fehlgeschlagen!"
          echo "‚ùå ============================================"
          exit 1
        fi
    
    - name: Verify push success
      run: |
        echo "=== Verifiziere Push-Erfolg ==="
        git fetch origin
        
        LOCAL_HASH=$(git rev-parse HEAD)
        REMOTE_HASH=$(git rev-parse origin/main)
        
        echo "Local Hash:  $LOCAL_HASH"
        echo "Remote Hash: $REMOTE_HASH"
        
        if [ "$LOCAL_HASH" = "$REMOTE_HASH" ]; then
          echo ""
          echo "‚úÖ ============================================"
          echo "‚úÖ VERIFIKATION ERFOLGREICH!"
          echo "‚úÖ Push wurde erfolgreich auf GitHub gespeichert"
          echo "‚úÖ ============================================"
        else
          echo ""
          echo "‚ùå ============================================"
          echo "‚ùå VERIFIKATION FEHLGESCHLAGEN!"
          echo "‚ùå Lokale und Remote Version unterscheiden sich"
          echo "‚ùå ============================================"
          
          # Zeige die Unterschiede
          echo ""
          echo "=== Unterschiede ==="
          git diff origin/main --stat || true
          
          exit 1
        fi
    
    - name: Final Status Report
      if: always()
      run: |
        echo ""
        echo "============================================"
        echo "           FINALER STATUS REPORT"
        echo "============================================"
        echo ""
        echo "üìÑ status.json:"
        cat status.json || echo "ERROR: status.json nicht gefunden"
        echo ""
        echo "üìÑ history.json (letzte 5 Eintr√§ge):"
        python -c "
import json
try:
    with open('history.json', 'r') as f:
        history = json.load(f)
        changes = history.get('changes', [])
        print(f'Gesamt: {len(changes)} √Ñnderungen')
        for change in changes[-5:]:
            print(f\"  ‚Ä¢ {change.get('from', '?')} ‚Üí {change.get('date', '?')} am {change.get('timestamp', '?')}\")
except Exception as e:
    print(f'ERROR: {e}')
" || echo "ERROR: Konnte history.json nicht lesen"
        echo ""
        echo "üîÑ Git Status:"
        git status --short || echo "ERROR: Git status fehlgeschlagen"
        echo ""
        echo "üìù Git Log (letzte 5 Commits):"
        git log --oneline -5 || echo "ERROR: Git log fehlgeschlagen"
        echo ""
        echo "============================================"
